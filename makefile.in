
COLLECT = ar cru
RANLIB = ranlib
LNK = ln -s
RPMARCH = `rpmbuild --showrc | awk '/^build arch/ {print $$4}'`
MSGCAT = msgcat
MSGFMT = msgfmt -c --statistics

CFLAGS_=$(CFLAGS) -std=c99 -pedantic

docdir          = $(datadir)/doc/$(TARGET)
SRCDIR          = $(src_dir)
BUILDDIR        = $(build_dir)/

LIBRARIES = $(TARGET)
LIB=
LIBSONAMEFULL = $(LIB)$(TARGET)$(SO).$(VERSION)$(LIBEXT)
LIBSONAME = $(LIB)$(TARGET)$(SO).$(VERSION_A)$(LIBEXT)
LIBSO = $(LIB)$(TARGET)$(SO)$(LIBEXT)
LIBNAME = $(LIB)$(TARGET).a


INCL= -I/usr/include -I$(includedir) -I/usr/X11R6/include -I$(SRCDIR)/include \
	$(X_H) $(OS_INCL) $(OYRANOS_H)

LDLIBS = $(LDFLAGS) -L$(libdir) -L. \
	 $(OYRANOS_LIBS) $(c)

CHEADERS = 
CFILES = \
	$(XCMDDC_CFILES) \
	$(XCMEDID_CFILES) \
	$(XCMEVENTS_CFILES)

XCMEVENTS_CFILES = \
	src/$(TARGET_MINI)events/$(TARGET_MINI)events.c
XCMEDID_CFILES = \
	src/$(TARGET_MINI)edid/$(TARGET_MINI)edid.c
XCMDDC_CFILES = \
	src/$(TARGET_MINI)ddc/$(TARGET_MINI)ddc.c

UDEV_RULES = \
	scripts/90-xcm-i2c.rules

SCRIPT_FILES = \
	$(UDEV_RULES)

TEST_CPP = \
	tests/dl_test.cxx \
	tests/intptr_test.c \
	tests/lib_test.cxx \
	tests/library.c
CPPFILES =
CXXFILES =
TEST_FILES = $(TEST_CPP) $(TEST_H)


DOKU =  AUTHORS \
        ChangeLog \
        COPYING \
        README
MAN3_HAND =
MAN1 =  xcmddc.1 xcmedid.1
MAN3 =  $(MAN3_HAND) $(MAN3_GENERATED)

TOP_SOURCES =
SOURCES =  \
	$(TOP_SOURCES) \
	$(CFILES)

# we need these files to generate explicite targets for out of tree builds
COBJECTS = \
	$(CFILES:.c=.o)
CXXOBJECTS = \
	$(CXXFILES:.cxx=.o)

OBJECTS = $(CPPFILES:.cpp=.o) $(CXXFILES:.cxx=.o) $(CFILES:.c=.o)
XCMEVENTS_OBJECTS = $(XCMEVENTS_CFILES:.c=.o)
XCMEDID_OBJECTS = $(XCMEDID_CFILES:.c=.o)
XCMDDC_OBJECTS = $(XCMDDC_CFILES:.c=.o)

CLEAN_OBJECTS = \
	$(OBJECTS) \
	$(XCMEVENTS_OBJECTS) \
	$(XCMEDID_OBJECTS) \
	$(XCMDDC_OBJECTS)

SUB_OBJECTS = \
	$(CFILES:.c=.o)

INCL_DEP = $(SOURCES)


CONFIG_FILES = \
	$(SRCDIR)/configure \
	$(SRCDIR)/configure_tests.sh \
	$(SRCDIR)/makefile.in \
	$(SRCDIR)/$(TARGET).spec.in \
	$(SRCDIR)/$(TARGET)_control.in

ALL_FILES = \
	$(DOKU) \
	$(DIST_FILES) \
	$(TOP_SOURCES) \
	$(TOP_CHEADERS) \
	$(MAN1) $(MAN3_HAND)

# build all what is needed to run the libraries, helpers
all:	config.log.h mkdepend \
	$(TARGET_MINI)events $(TARGET_MINI)edid $(TARGET_MINI)ddc
	echo ... $@ done

# get time stamp
MTIME   := $(shell date +%y%m%d.%H%M%S)

# this is a test
time:
	echo $(MTIME)

# build all objects and libraries, link the headers to $(TARGET)
$(LIBSONAMEFULL):	$(OBJECTS) $(LIBNAME)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS_) $(LINK_FLAGS_DYNAMIC)$(dyld_libdir)$(LIBSONAME) \
	-o $(LIBSONAMEFULL) \
	$(OBJECTS) \
	-L$(libdir) $(LDLIBS) $(m) $(X11_LIBS)
	$(RM)  $(LIBSONAME)
	$(LNK) $(LIBSONAMEFULL) $(LIBSONAME)
	$(RM)  $(LIBSO)
	$(LNK) $(LIBSONAMEFULL) $(LIBSO)




$(LIBNAME):	$(OBJECTS)
	echo Linking $@ ...
	test -f $(LIBNAME) && $(RM) $(LIBNAME) || echo ""
	$(COLLECT) $(LINK_FLAGS_STATIC) $(LIBNAME) \
		$(OBJECTS)
	$(RANLIB) $(LIBNAME)

$(TARGET_MINI)events:	 $(XCMEVENTS_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS_) \
	-o $@ $(XCMEVENTS_OBJECTS) $(m) \
	-L$(libdir) $(LDLIBS) $(m) $(X11_LIBS)

$(TARGET_MINI)edid:	 $(XCMEDID_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS_) \
	-o $@ $(XCMEDID_OBJECTS) $(m) \
	-L$(libdir) $(LDLIBS) $(m) $(X11_LIBS)

$(TARGET_MINI)ddc:	 $(XCMDDC_OBJECTS)
	echo Linking $@ ...
	$(CC) -I./ $(CFLAGS_) \
	-o $@ $(XCMDDC_OBJECTS) $(m) \
	-L$(libdir) $(LDLIBS) $(m) $(X11_LIBS)

check:	all
	echo current git version is:
	n=0; for i in `cd $(SRCDIR); git rev-list master`; do if [ $${n} -eq 0 ]; then echo git id:$${i}; fi; n=1; done
	oyranos-monitor -f edid -o edid.bin
	./$(TARGET_MINI)edid edid.bin
	if [ `oyranos-monitor -l | wc -l` -gt 1 ]; then \
	  oyranos-monitor -x 2000 -f edid -o edid2.bin; \
	  ./$(TARGET_MINI)edid edid2.bin; \
	fi




# the copy part for this directory level
install-bin:	install_bin
install_bin:	all
	echo Installing binaries ...
	mkdir -p $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(TARGET_MINI)events $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(TARGET_MINI)edid $(DESTDIR)$(bindir)
	$(INSTALL) -m 755 $(TARGET_MINI)ddc $(DESTDIR)$(bindir)
	-$(INSTALL) -m 644 $(UDEV_RULES) $(DESTDIR)/lib/udev/rules.d/
	echo ... binary Installation finished

# install recursive
install:	install-main
	echo ... $@ done

install-main:	install_bin install_docu

install_udev:
	$(INSTALL) -m 755 -d  $(DESTDIR)/lib/udev/rules.d/
	$(INSTALL) -m 644 $(UDEV_RULES) $(DESTDIR)/lib/udev/rules.d/

# synonymes
install_doc:	install_docu
install-docs:	install_docu

install_docu:	docu
	test -d $(DESTDIR)$(docdir) || mkdir -p $(DESTDIR)$(docdir)
	-cd $(SRCDIR); $(INSTALL) -m 644 $(DOKU) $(DESTDIR)$(docdir)
	mkdir -p $(DESTDIR)$(mandir)/man1
	cd $(SRCDIR) && \
	  $(INSTALL) -m 644 $(MAN1) $(DESTDIR)$(mandir)/man1

docu:

# build a source distribution package
dist: targz
	test -d ../Archiv && mv -v ../Archiv/$(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz || mv -v $(TARGET)-$(MTIME).tgz $(TARGET)-$(VERSION).tar.gz

dist-gzip:	dist

# build a binary rpm package
rpm:	dist
	$(SRCDIR)/configure --prefix=/usr --rpm-only # generate the spec file
	mkdir -p rpmdir/BUILD \
	rpmdir/SPECS \
	rpmdir/SOURCES \
	rpmdir/SRPMS \
	rpmdir/RPMS/$(RPMARCH)
	$(COPY) -f $(TARGET)-$(VERSION).tar.gz rpmdir/SOURCES
	rpmbuild --clean -ba $(build_dir)/$(TARGET).spec --define "_topdir $$PWD/rpmdir"
	@echo "============================================================"
	@echo "Finished - the packages are in rpmdir/RPMS and rpmdir/SRPMS!"

deb:	dist
	$(SRCDIR)/configure --prefix=/usr --rpm-only
	mkdir -p debian/deb/DEBIAN
	tar xvzf $(TARGET)-$(VERSION).tar.gz
	(cd $(TARGET)-$(VERSION); \
	./configure --prefix=/usr; \
	make DESTDIR=$(build_dir)/debian/deb/DEBIAN install;)
	$(COPY) $(TARGET)-$(VERSION)/$(TARGET)_control $(build_dir)/debian/deb/DEBIAN/control
	$(RM) -R $(TARGET)-$(VERSION)
	dpkg -b $(build_dir)/debian/deb debian/$(TARGET)_$(VERSION)-$(RELEASE)_$(deb_arch).deb
	$(RM) -R $(build_dir)/debian/deb
	echo ... $@ done

# remove everything previously installed
uninstall:	uninstall_bin uninstall_docu
	echo ... $@ done

uninstall-bin:
uninstall_bin:
	echo Uninstalling binaries ...
	$(RM) $(DESTDIR)$(bindir)/$(TARGET_MINI)events
	$(RM) $(DESTDIR)$(bindir)/$(TARGET_MINI)edid
	$(RM) $(DESTDIR)$(bindir)/$(TARGET_MINI)ddc
	echo ... done uninstalling binaries
	
uninstall-docs:	uninstall_docu
uninstall_docu:
	echo Uninstalling docu ...
	for file in $(DOKU); do \
	  $(RM) $(DESTDIR)$(docdir)/$$file; \
	done
	for file in $(MAN1); do \
	  $(RM) $(DESTDIR)$(mandir)/man1/$$file; \
	done
	for file in $(MAN3); do \
	  $(RM) $(DESTDIR)$(mandir)/man3/$$file; \
	done
	echo ... done uninstalling docu


# remove in this directory
distclean: clean
	-$(RM) Makefile
	-$(RM) mkdepend cobjects config.h $(TARGET_MINI).pc $(TARGET).spec $(TARGET)_control
	-$(RM) config.log $(TARGET)_version.h
	-$(RM) config.log.h config.tmp.sh testset.txt

clean:
	-$(RM) $(CLEAN_OBJECTS)
	$(RM) $(TARGET_MINI)events
	$(RM) $(TARGET_MINI)edid
	-for lib in $(LIBRARIES); do \
	   $(RM) $(LIB)$${lib}$(SO).$(VERSION)$(LIBEXT) \
	         $(LIB)$${lib}$(SO).$(VERSION_A)$(LIBEXT) \
	         $(LIB)$${lib}$(SO)$(LIBEXT) \
	         $(LIB)$${lib}.a; \
	done
	echo ... $@ done

# configure if the file config is not available
config.log.h:	$(CONFIG_FILES) ./config.log
	./config.log

# try to resolve dependencies
depend:	cdepend
	echo "setting up dependencies ..."
	echo "MAKEDEPEND_ISUP = 1" > mkdepend
	echo "#nicht editieren/dont edit - automatisch generiert von makefile.in" >> mkdepend
	-(for file in $(INCL_DEP); do \
	    incl_src="$${incl_src} $(SRCDIR)/$${file}"; done; \
	  $(MAKEDEPEND) -I./ -I$(SRCDIR) $(INCL) $${incl_src} >> mkdepend)
	-for file in $(SUB_OBJECTS); do \
	   obj=`echo $${file} | sed 's%src/%% ; s%xcmsevents/%%'`; \
	   cat mkdepend | sed s%$${obj}%$${file}% > mkdepend.tmp; \
	   mv mkdepend.tmp mkdepend; \
         done

cdepend:
	echo preparing dependency compilation ...
	echo "COBJECTS_ISUP = 1" > cobjects
	echo "#nicht editieren/dont edit - automatisch generiert von makefile.in" >> cobjects
	echo "" >> cobjects
	for i in $(COBJECTS); do \
	  echo "$${i}:	\$$(SRCDIR)/$${i}" | sed s/\.o\$$/.c/ >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CC) -I./ -I$$(SRCDIR) $$(CFLAGS_) $$(INCL) -c -o $$*.o $$(SRCDIR)/$$*.c' >> cobjects; \
	  echo "" >> cobjects; \
	done
	for i in $(CPPOBJECTS); do \
	  echo "$${i}:	\$$(SRCDIR)/$${i}" | sed s/\.o\$$/.cpp/ >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CXX) -I./ -I$$(SRCDIR) $$(CXXFLAGS) $$(INCL) -c -o $$*.o $$(SRCDIR)/$$*.cpp' >> cobjects; \
	  echo "" >> cobjects; \
	done
	for i in $(CXXOBJECTS); do \
	  echo "$${i}:	\$$(SRCDIR)/$${i}" | sed s/\.o\$$/.cxx/ >> cobjects; \
	  echo "	echo Compiling $${i} ..." >> cobjects; \
	  echo '	$$(CXX) -I./ -I$$(SRCDIR) $$(CXXFLAGS) $$(INCL) -c -o $$*.o $$(SRCDIR)/$$*.cxx' >> cobjects; \
	  echo "" >> cobjects; \
	done


# Build commands and filename extensions...
.SUFFIXES:	.c .cxx .h .fl .o .po


.c.o:
	echo Compiling $(SRCDIR)/$< ...
	$(CC) -I. $(CFLAGS_) $(INCL) -c -o $@ $(SRCDIR)/$<

.cxx.o:
	echo Compiling $(SRCDIR)/$< ...
	$(CXX) -I. $(CXXFLAGS) $(INCL) $(FLTK_H) -c -o $@ $(SRCDIR)/$<

.cpp.o:	mkdepend
	echo Compiling $(SRCDIR)/$< ...
	$(CXX) -I. $(CXXFLAGS) $(INCL) -c -o $@ $(SRCDIR)/$<

.fl.cxx:
	echo Expanding $< ...
	fluid -c $<
	-$(MOVE) `echo $*.cxx $*.h | sed s%$(SRCDIR)/%%g` $(SRCDIR)

.po:
	echo Generating $@ ...
	msgfmt $<


# smallest package covering the current directory
tgz:
	-test -d Entwickeln && $(RM) -r Entwickeln
	$(MAKE) DESTDIR=Entwickeln copy_files
	tar cf - Entwickeln/ \
	| gzip > $(TARGET)_$(MTIME).tgz
	-test -d ../Archiv && mv -v $(TARGET)_*.tgz ../Archiv
	-test -d Entwickeln && \
	test `pwd` != `(cd Entwickeln; pwd)` && \
	rm -R Entwickeln

# build the source package including the subdirectories
targz:
	test -d $(TARGET)-$(VERSION) && $(RM) -R $(TARGET)-$(VERSION) || echo -e "\c"
	$(MAKE) DESTDIR=$(build_dir)/$(TARGET)-$(VERSION) copy_files
	tar cf - $(TARGET)-$(VERSION)/ \
	| gzip > $(build_dir)/$(TARGET)-$(MTIME).tgz
	test -d $(build_dir)/$(TARGET)-$(VERSION) && \
	test `pwd` != `(cd $(build_dir)/$(TARGET)-$(VERSION); pwd)` && \
	$(RM) -R $(build_dir)/$(TARGET)-$(VERSION)
	test -d ../Archiv && mv -v $(TARGET)-*.tgz ../Archiv || echo "no copy"

# basic file set
copy_files:
	mkdir -p $(DESTDIR)
	cd $(SRCDIR) && \
	  $(COPY) -R $(ALL_FILES) $(DESTDIR)
	$(COPY) $(CONFIG_FILES) $(DESTDIR)
	mkdir -p $(DESTDIR)/src/$(TARGET_MINI)events
	cd $(SRCDIR) && \
	  $(COPY) $(XCMEVENTS_CFILES) $(DESTDIR)/src/$(TARGET_MINI)events
	mkdir -p $(DESTDIR)/src/$(TARGET_MINI)ddc
	cd $(SRCDIR) && \
	  $(COPY) $(XCMDDC_CFILES) $(DESTDIR)/src/$(TARGET_MINI)ddc
	mkdir -p $(DESTDIR)/src/$(TARGET_MINI)edid
	cd $(SRCDIR) && \
	  $(COPY) $(XCMEDID_CFILES) $(DESTDIR)/src/$(TARGET_MINI)edid
	mkdir -p $(DESTDIR)/scripts
	cd $(SRCDIR) && \
	  $(COPY) $(SCRIPT_FILES) $(DESTDIR)/scripts
	mkdir -p $(DESTDIR)/tests
	cd $(SRCDIR) && \
	  $(COPY) $(TEST_FILES) $(DESTDIR)/tests
	echo ... $@ done

help:
	echo "... all :        build the binaries"
	echo "non default build targets:"
	echo "... check :      do a test build and run it"
	echo "... "
	echo "... install :    install the binaries, include files and data"
	echo "... install-bin: install only binaries"
	echo "... install-docs: install only documentation"
	echo "... uninstall"
	echo "... clean :      remove binaries, object files and most processed data"
	echo "... distclean :  remove all files processed from configure scripts"
	echo "... rpm :        build RPM's"
	echo "... dist :       build a distribution tarball and place local"
	echo "... targz :      build a distribution tar ball"
	echo "... tgz :        build a development tar ball"
	echo "... copy_files : copy distribution files to a DESTDIR=xxx path"
	echo "... depend :     resolve dependencies"
	echo "  VARIABLES:"
	echo "... DESTDIR=\"/user/a/My Install Dir/\" install"
	echo "... BUILDDIR=../build_local"

# dependencies
include mkdepend
include cobjects

#ifndef MAKEDEPEND_ISUP
mkdepend: depend
#endif
#ifndef COBJECTS_ISUP
cobjects: cdepend
#endif

